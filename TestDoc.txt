Команды GitHub
cd Dir
Git clone
Git status
dir
Git add filename.typ
git commit -m "добавил команды Githab в TestDoc.txt"
Git push
git log
git rm
git branch, после которой следует имя создаваемой ветки
git branch --list. Она выведет список веток, которые существуют в вашем локальном репозитории
git branch --list -v . Вы увидите информацию о последних коммитах каждой из веток
git checkout необходимо выполнить для переключения на созданную ветку/ Например, git checkout testbranch00
git push --set-upstream origin testbranch01

*************************************************************************************************************
git config --global user.email "email@serv.dom"
git config --global user.name "Vasua Pupkin"
*************************************************************************************************************

Последовательность команд для фиксации изменений на сервере GitHub:

git add .
git commit -m "текст на сайт о релизе"
Git push   или  git push --set-upstream origin NameBranch
Git status



Первоначальная настройка GIT
выполняется после того, как git был установлен на компьютер или при необходимости внести изменения

Установить/изменить имя пользователя

git config --global user.name "Ваше Имя"
Установить/изменить email пользователя

git config --global user.email ваша@почта.com
Установить/изменить редактор

git config --global core.editor название/путь(в windows) к редактору
Посмотреть значения

git config --global user.name 
git config --global user.email
Просмотр всех настроек

git config --list --show-origin
Аргументы:

--global (для текущего пользователя)
--system (для всех пользователей)
без аргумента (на конкретный проект)
GIT - распределённая система контроля версий, которая даёт возможность разработчикам:
отслеживать и фиксировать изменения в файлах
возвращаться к зафиксированным изменениям
синхронизироваться с удаленными репозиториями
работать с ветками
репозиторий — набор файлов, находящихся под контролем версий git, вместе с историей их изменений и другой служебной информацией

Способы получения GIT-репозитория
Превратить каталог, который не находится под версионным контролем, в репозиторий Git

git init
команда создаёт в текущем каталоге новый подкаталог с именем .git, содержащий все необходимые файлы репозитория 2. Клонировать существующий репозиторий Git

   git clone ссылка-на-репозиторий, например git clone https://github.com/ifmo-web/git-base.git
   git clone ссылка-на-репозиторий новое-имя-каталога
команда создаёт каталог, инициализирует в нём подкаталог .git, скачивает все данные для этого репозитория и извлекает копию последней версии

Файл .gitignore
Имена файлов / папок, которые не должны попадать под версионный контроль необходимо поместить в .gitignore файл

Проверить текущее состояние репозитория
git status
Три основных состояния Git, в которых могут находиться файлы:
изменён (modified) - измененные, но не проиндексированные (не подготовленные к сохранению);
индексирован (staged) - проиндексированные (готовые к сохранению), но не сохраненные;
зафиксирован (committed) - сохраненный.
Базовый подход в работе с Git:
Изменения файлов;
Добавление в индекс файлов, которые должны попасть в следующий коммит (изменения в этих файлах будут сохранены);
Коммит (фиксация изменений), снимок сохраняется в каталог Git (сохранение состояния проекта).
Добавление файлов под версионный контроль / Индексация изменённых файлов
git add имя_файла - добавление одного файла
git add имя_папки/ - добавление папки со всем ее содержимым
git add * - добавит все новые  / измененные файлы
Удаление файлов из индекса
git rm --cached имя_файла - удаление только из индекса
git rm -f имя_файла - удаление из индекса и из проекта
Фиксация изменений (сохранение состояния) В коммит попадут (будут сохранены) только файлы, которые были проиндексированы командой git add
git commit -m "сообщение коммита"
git commit -a "сообщение коммита" - аналогично командам (git add * + git commit -m "сообщение коммита")

git commit --amend - изменить сообщение последнего коммита (через редактор)
git commit --amend -m "сообщение коммита" - объединение нового коммита с последним и создание нового сообщения к коммиту
git commit --amend --no-edit - объединение нового коммита с последним без формирование нового сообщения к коммиту
Просмотр истории коммитов
git log
ССЫЛКА: Дополнительная информация о просмотре истории коммитов

Информация о коммите (метаданные):
уникальный идентификатор коммита (хеш);
имя и email автора коммита;
дата создания коммита;
комментарий к коммиту.
Скрытие (прятание) изменений (проект возвращается в состояние последнего коммита)
git stash - скрытие (прятание)
git stash list - выводит список всех прятаний
git stash apply - вернуть последнее прятание
git stash apply индекс, например  git stash apply stash@{1} - вернуть прятание по индексу
git stash clear - удалить все прятанья
Работа с удаленными репозиториями
Добавление (удаление) удалённых репозиториев:
git remote add <имя> <url>, например git remote add origin https://github.com/profi-jjd/project.git добавление
git remote remove <имя>, например git remote remove origin удаление
Отправка изменений в удаленный репозиторий:
git push
git push <имя_удаленного_репозитория> <имя_ветки>, например git push origin master
Получение изменений из удалённого репозитория:
данную команду принято также выполнять каждый раз перед оправкой изменений в удаленный репозиторий

git pull
Конфликты слияния при выполнении команды git pull
Зафиксировать изменения
Выполнить один из пунктов:
git pull и решить конфликт вручную
git pull -Xours - автоматически выбрать локальную версию
git pull -Xtheirs - автоматически выбрать версию удаленного репозитория
Ветвления:
git branch - отображает список веток
git branch <имя ветки> - создание ветки
git checkout <имя_ветки> - переключение на ветку
git push origin <имя ветки> - отправить ветку с изменениями в удаленный репозиторий
git merge <имя другой ветки> - слияние веток
git branch -d <имя ветки> - удаление ветки из локального репозитория
git push origin --delete <имя ветки> - удаление ветки из удаленного репозитория
git branch --merged - список всех веток, соединённых с текущей
git branch --no-merged - список всех не соединённых с текущей веток
Команда git switch (Git 2.23.0.) берет на себя часть функционала git checkout, связанную с переключением веток
git switch <имя ветки> — переключиться на указанную ветку
git switch -c <имя ветки> — создать новую ветку и переключиться на нее
git switch -  - переключение туда-сюда между двумя ветками
Перемещение по коммитам
Checkout

Перейти к предыдущему коммиту (для просмотра):

 git checkout <хэш сумма коммита> - перейти к желаемому коммиту
 git checkout <имя ветки>, например git checkout main (или master)  - вернуться в прежнее состояние
Перейти к предыдущему коммиту в новой ветке (для продолжения работы в ней):

 git checkout -b <имя новой ветки> <хэш сумма коммита>
Revert (отмена изменений, произведенных в прошлом отдельным коммитом).

git revert <хэш сумма коммита> - создает новый коммит, накладывающий обратные изменения
Restore (отмена локальных изменений, восстановление файлов).

git restore <имя_файла> - отменить локальные изменения в конкретном файле
git restore . - отменить все локальные изменения
git restore --staged <имя_файла> - вернуть файл из состояния staged, но оставить в нем изменения 
git restore --source <хеш/весия> <имя_файла> восстановление файла из истории
Reset

git reset --mixed HEAD~1 - отмена коммита 
git reset --mixed - отмена последнего коммита
HEAD~1  указывает, что HEAD должен быть переключен на «коммит перед самым последним»
    --soft - изменения, содержащиеся в отменяемом коммите, НЕ должны исчезнуть (должны быть сохранены в виде проиндексированных - staged)
    --mixed - изменения, содержащиеся в отменяемом коммите, НЕ должны исчезнуть (должны быть сохранены в виде локальных изменений) 
    --hard - изменения, содержащиеся в отменяемом коммите исчезают
Удаление файлов из удаленного репозитория:
Когда появляется необходимость удалить файлы из удаленного, но не локального репозитория необходимо последовательно выполнить следующие команды:

git rm -r --cached имя-файла или папки
Можно добавить названия файлов или папок в .gitignore, чтобы git игнорировал их
Выполнить commit
Выполнить push
После этого все перечисленные файлы будут удалены из удаленного репозитория, но сохранятся в локальном.

Вернуть указатель (HEAD) к последнему коммиту:
  git checkout HEAD @{1}
Удалить все несохраненные в коммит изменения
  git reset --hard
Вернуться к указанному коммиту, удалив все предыдущие
Если не была выполнена команда git push.

  git reset --hard хеш коммита
Некоторые определения:
origin - имя (по умолчанию) удаленного репозитория (git присваивает данное имя удаленному серверу)
master - имя ветки, которую создает git
HEAD - указатель на текущий коммит в текущей ветке
Индекс (область индексирования) - это файл, обычно находящийся в каталоге Git, в нём содержится информация о том, что попадёт в следующий коммит
ССЫЛКИ:
Git Book
Интерактивный тур по git
Ветвление в игровой форме